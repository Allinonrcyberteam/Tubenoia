<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tubenoia
</name>
</assembly>
<members>
<member name="M:Tubenoia.TypingMonkey.TypeAway(System.Int32)">
	<summary>
 The Typing Monkey Generates a random string with the given length.
 </summary>
	<param name="size">Size of the string</param>
	<returns>Random string</returns>
</member><member name="M:Tubenoia.CountDown.#ctor">
	<summary>
 Initializes a new instance of the CountDown class.
 </summary>
</member><member name="M:Tubenoia.CountDown.#ctor(System.TimeSpan)">
	<summary>
 Initializes a new instance of the CountDown class with the value from a System.Timespan.
 </summary>
	<param name="Span">The System.TimeSpan to take the value from</param>
</member><member name="M:Tubenoia.CountDown.#ctor(System.Int32)">
	<summary>
 Initializes a new instance of the CountDown class with the value from Seconds.
 </summary>
	<param name="Seconds">Number of Seconds</param>
</member><member name="M:Tubenoia.CountDown.#ctor(System.Int32,System.Int32)">
	<summary>
 Initializes a new instance of the CountDown class with the value from Seconds and Minutes.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
</member><member name="M:Tubenoia.CountDown.#ctor(System.Int32,System.Int32,System.Int32)">
	<summary>
 Initializes a new instance of the CountDown class with the value from Seconds, Minutes and Hours.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
</member><member name="M:Tubenoia.CountDown.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Initializes a new instance of the CountDown class with the value from Seconds, Minutes, Hours and Days.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
	<param name="Days">Number of Days</param>
</member><member name="M:Tubenoia.CountDown.Start">
	<summary>
 Start the timer.
 </summary>
</member><member name="M:Tubenoia.CountDown.Pause">
	<summary>
 Pause the timer.
 </summary>
</member><member name="M:Tubenoia.CountDown.Reset">
	<summary>
 Stop the timer and reset the time.
 </summary>
</member><member name="M:Tubenoia.CountDown.SetTime(System.TimeSpan)">
	<summary>
 Set the time of the timer with the value from a System.Timespan.
 </summary>
	<param name="Span">The System.TimeSpan to take the value from</param>
</member><member name="M:Tubenoia.CountDown.SetTime(System.Int32)">
	<summary>
 Set the time of the timer with Seconds.
 </summary>
	<param name="Seconds">Number of Seconds</param>
</member><member name="M:Tubenoia.CountDown.SetTime(System.Int32,System.Int32)">
	<summary>
 Set the time of the timer with Seconds and Minutes.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
</member><member name="M:Tubenoia.CountDown.SetTime(System.Int32,System.Int32,System.Int32)">
	<summary>
 Set the time of the timer with Seconds, Minutes and Hours.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
</member><member name="M:Tubenoia.CountDown.SetTime(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Set the time of the timer with Seconds, Minutes, Hours and Days.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
	<param name="Days">Number of Days</param>
</member><member name="M:Tubenoia.CountDown.AddTime(System.TimeSpan)">
	<summary>
 Add extra time to the timer with the value from a System.Timespan.
 </summary>
	<param name="Span">The System.TimeSpan to take the value from</param>
</member><member name="M:Tubenoia.CountDown.AddTime(System.Int32)">
	<summary>
 Add extra time to the timer with Seconds.
 </summary>
	<param name="Seconds">Number of Seconds</param>
</member><member name="M:Tubenoia.CountDown.AddTime(System.Int32,System.Int32)">
	<summary>
 Add extra time to the timer with Seconds and Minutes.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
</member><member name="M:Tubenoia.CountDown.AddTime(System.Int32,System.Int32,System.Int32)">
	<summary>
 Add extra time to the timer with Seconds, Minutes and Hours.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
</member><member name="M:Tubenoia.CountDown.AddTime(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Add extra time to the timer with Seconds, Minutes, Hours and Days.
 </summary>
	<param name="Seconds">Number of Seconds</param>
	<param name="Minutes">Number of Minutes</param>
	<param name="Hours">Number of Hours</param>
	<param name="Days">Number of Days</param>
</member><member name="P:Tubenoia.CountDown.Seconds">
	<summary>
 Returns the number of Seconds left.
 </summary>
</member><member name="P:Tubenoia.CountDown.Minutes">
	<summary>
 Returns the number of Minutes left.
 </summary>
</member><member name="P:Tubenoia.CountDown.Hours">
	<summary>
 Returns the number of Hours left.
 </summary>
</member><member name="P:Tubenoia.CountDown.Days">
	<summary>
 Returns the number of Days left.
 </summary>
</member><member name="P:Tubenoia.CountDown.TotalSeconds">
	<summary>
 Returns the time in Seconds.
 </summary>
</member><member name="P:Tubenoia.CountDown.TotalMinutes">
	<summary>
 Returns the time in Minutes.
 </summary>
</member><member name="P:Tubenoia.CountDown.TotalHours">
	<summary>
 Returns the time in Hours.
 </summary>
</member><member name="P:Tubenoia.CountDown.TotalDays">
	<summary>
 Returns the time in Days.
 </summary>
</member><member name="E:Tubenoia.CountDown.TimesOut">
	<summary>
 Raises when the timer reaches 0.
 </summary>
</member><member name="E:Tubenoia.CountDown.Tick">
	<summary>
 Raises each Seconds.
 </summary>
</member><member name="T:Tubenoia.CountDown">
	<summary>
 Implements a countdown timer that raises an event each millisecond but most important when the time have run out.
 </summary>
</member><member name="P:Tubenoia.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tubenoia.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:Tubenoia.My.Resources.Resources.config">
	<summary>
  Looks up a localized string similar to [Captcha]
DBCP = 
DBCTimeout = 25
DBCU = 
UseDBC = Dismiss
[General]
First = 0
Threads = 1.
</summary>
</member><member name="T:Tubenoia.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.ValueChanged">
	<summary>Occurs when the value of the progress bar is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.PercentageDecimalsChanged">
	<summary>Occurs when the amount of decimals to be displayed in the percentage is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.PercentageVisibleChanged">
	<summary>Occurs when the visibility of the percentage text is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.AutoUpdatePercentageChanged">
	<summary>Occurs when the automatic updating of the percentage is turned on or off</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.OverlayTextColorChanged">
	<summary>Occurs when the OverlayTextColor property is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.TextColorChanged">
	<summary>Occurs when the TextColor property is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.PercentageAlignChanged">
	<summary>Occurs when the align of the percentage text is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.DisplayFormatChanged">
	<summary>Occurs when the display format is changed</summary>
</member><member name="E:Tubenoia.ProgressbarWithPercentage.PaddingChanged">
	<summary>Occurs when the padding of the percentage text is changed</summary>
</member><member name="M:Tubenoia.ProgressbarWithPercentage.#ctor">
	<summary>Create a new instance of a ProgressbarWithPercentage</summary>
</member><member name="M:Tubenoia.ProgressbarWithPercentage.PerformStep">
	<summary>Advances the current possition of the progressbar by the amount of the Step property</summary>
</member><member name="M:Tubenoia.ProgressbarWithPercentage.ShowPercentage">
	<summary>Show the current percentage as text</summary>
</member><member name="M:Tubenoia.ProgressbarWithPercentage.ShowText(System.String)">
	<summary>Display a string on the progressbar</summary>
	<param name="text">Required. String. The string to display</param>
</member><member name="T:Tubenoia.ProgressbarWithPercentage">
	<summary>Component that extends the native .net progressbar with percentage properties and the ability to overlay the percentage</summary>
	<remarks>Component ProgressbarWithPercentage v1.0.10, by De Dauw Jeroen - November 2009</remarks>
</member><member name="T:Tubenoia.ListViewEmbeddedControls.ListViewEx.EmbeddedControl">
	<summary>
 Structure to hold an embedded control's info
 </summary>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.GetColumnOrder">
	<summary>
 Retrieve the order in which columns appear
 </summary>
	<returns>Current display order of column indices</returns>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.GetSubItemBounds(System.Windows.Forms.ListViewItem,System.Int32)">
	<summary>
 Retrieve the bounds of a ListViewSubItem
 </summary>
	<param name="Item">The Item containing the SubItem</param>
	<param name="SubItem">Index of the SubItem</param>
	<returns>Subitem's bounds</returns>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.AddEmbeddedControl(System.Windows.Forms.Control,System.Int32,System.Int32)">
	<summary>
 Add a control to the ListView
 </summary>
	<param name="c">Control to be added</param>
	<param name="col">Index of column</param>
	<param name="row">Index of row</param>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.AddEmbeddedControl(System.Windows.Forms.Control,System.Int32,System.Int32,System.Windows.Forms.DockStyle)">
	<summary>
 Add a control to the ListView
 </summary>
	<param name="c">Control to be added</param>
	<param name="col">Index of column</param>
	<param name="row">Index of row</param>
	<param name="dock">Location and resize behavior of embedded control</param>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.RemoveEmbeddedControl(System.Windows.Forms.Control)">
	<summary>
 Remove a control from the ListView
 </summary>
	<param name="c">Control to be removed</param>
</member><member name="M:Tubenoia.ListViewEmbeddedControls.ListViewEx.GetEmbeddedControl(System.Int32,System.Int32)">
	<summary>
 Retrieve the control embedded at a given location
 </summary>
	<param name="col">Index of Column</param>
	<param name="row">Index of Row</param>
	<returns>Control found at given location or null if none assigned.</returns>
</member><member name="T:Tubenoia.ListViewEmbeddedControls.ListViewEx">
	<summary>
 Zusammenfassung für ListViewEx.
 </summary>
</member>
</members>
</doc>